Polimorfismo= Usar um conceito genérico com atributos especificos.
Podemos criar uma  classe animal e partir dele criar mamifero,depois cachorro. Precisa ocorrer comportamento de herança
Abstração= simplificar o mundo real para modelar o codigo

_____
1º PILAR >> ENCAPSULAMENTO = alguns comportamentos do codigo  estão privados,não visiveis ao usuario
PRIVATE: ATRIBUITO DISPONIVEL APENAS NO ESCOPO DA CLASSE
PACKAGE (DEFAULT) : QUANDO UM ATRIBUTO É DEFINIDO DENTRO DE UM PACOTE, O MESMO SÓ PODE SER ACESSADO POR OUTROS DESTE LOCALIZAÇÕES
                QUANDO NENHUMA FORMA DE VISIBILIDADE FOR DEFINIDA, AUTOMATICAMENTE ASSUMIRÁ COMO PACOTE.
PROTECTED : DEPENDE DA HERANÇA. SÓ ACESSARÁ OUTRO ATRIBUTO DESDE QUE SEJA HERDADO.
PUBLIC: SEM RESTRIÇÃO
>> UM ATRIBUTO, MÉTODO ESTARÁ VISIVEL QUANDO APARECER AO DIGITAR UM PONTO APÓS O NOME DA CLASSE
______
>> PILAR >>>>  HERANÇA: RECEBE POR PADRÃO ATRIBUTOS E COMPORTAMENTOS DA CLASSE PAI
>> Utiliza a palavra reservada extends
>> NO REUSO DE UM CÓDIGO: O COMPORTAMENTO POR COMPOSIÇÃO É MAI FLEXÍVEL QUE HERANÇA.

-----
3º PILAR >>>>  POLIMORFISMO:
ESTÁTICO: Sobrecarga > Quando temos métodos com nomes iguais, porém com parametros diferentes. Sentido: sobrecarga do nome

DINÂMICO: A partir da herança temos o poliformismo dinamico.

________________________________
4º PILAR >>>>ABSTRAÇÃO: SIMPLIFICAÇÃO CONCEITOS DO MUNDO REAL E MODELAR NO SOFTWARE

________________________________
-- invocar construtor da classe atual> this.atributoOuMetodo
-- invocar construtor da classe pai> super.atributoOuMetodo
---------------------------
CONSTRUTORES PADRÕES NUMA ESTRUTURA DE HERANÇA
>>> NO JAVA POR REGRA AS CLASSES POSSUEM CONSTRUTORES PADRÕES, QUE Podemos
SER CHAMADOS POR SEUS FILHOS ATRAVÉS DA PALAVRA SUPER
CONTRUTOR PADRÃO> SÃO AQUELES QUE NÃO RECEBEM NENHUM PARAMETRO

EXEMPLO DE CONSTRUTOR EXPLICITO (NÃO MAIS PADRÃO)

NomeDaClasse(int x, int y) { // obrigatoriamente precisa ser definido esses parametros
this.x=x;
this.y=y
}
Para que as classes herdadas possa chamar esse atributo agora definido de forma explicita

Agora de a classe herdada precisará definir, neste caso os parametros de x e y
Abaixo é uma das formas de se resolver essa questão

> Aqui os valores são definidos pelo usuário
NomeDaClasseHerdada(intx, int y){
super(x,y)
}

ou
>> Aqui os valores são fixos
NomeDaClasseHerdada(){
super(0,0) // aqui já define-se um valor inicial para as posicões x e y
}
----------
Anotação @Override ao resgate!
Ela simplesmente informa ao compilador que a intenção seria de sobrescrever. Dessa forma,
o compilador pode avaliar se a assinatura está coerente com algum método das superclasses e
emite um aviso caso o método não esteja realmente sobrescrevendo algo!
----------
INTERFACE
por padrão todos os metodos serão publicos e abstratos
metodos abstract são aqueles que nao tem corpo definido, apenas a chamada
Exemplo: void ligarTurbo();
assim public abstract ficarão de modo implicito
_____
CLASSE ABSTRAÇÃO
No momento que criamos: public abstract classe Pessoa{
}
 a partir do momento que utilizamos a palavra abstract, essa classe não poderá mais ser instanciada
 >> criamos uma classe assim quando desejamos herdá-la
 ________________________________
 LAMBDA:
 Calculo calculo = (x,y) -> {return x + y; }; >> // NOTA: quando utilizamos o par de chaves> {return x + y; } é obrigatorio o uso da palavra return
 ou  calc= (x,y) ->  x * y;
________________________________
Os métodos static ou métodos da classe são funções que não dependem de nenhuma variável de instância,
 quando invocados executam uma função sem a dependência do conteúdo de um objeto ou a execução da instância de uma
 classe, conseguindo chamar direto qualquer método da classe e também manipulando alguns campos da classe.
 _________________________________________________________
 INTERFACES FUNCIONAIS
 BinaryOperator >> Recebe dois argumentos para gerar um resultado. >>>> AQUI NÃO PRECISARIAMOS CRIAR UMA INTERFACE
 -----
 CRIAR CONSTRUTORES AUTOMATICOS
 botão direita em qualquer lugar do código> generate> Constructor
 _____

 INTERFACE Predicate
 Predicate, que é uma interface, que espera uma função logica, isto é, que avalia uma expressão booleana,
 e retorna true ou false. Essa função é executada chamando o método test, que executará a função passada como
 parâmetro. Ao ser avaliada, se essa função retornar verdadeiro, imprime o valor da lista, caso contrário,
  não imprime nada.

  ________________________________________________________
  LAMBDAS
  As expressões lambdas são funções que podem conter expressões e declarações que são usadas para criar delegates
  e árvores de expressões onde o tipo das variáveis não precisam ser declarados visto que elas usam métodos anônimos.
  ...  Elas podem ser consideradas uma forma de delegate que pode passar ou retornar outra função.
  _________________________________________________________
  operacao ternaria>>>  numero -> numero % 2 == 0 ? "Par": "Impar";