Polimorfismo= Usar um conceito genérico com atributos especificos.
Podemos criar uma  classe animal e partir dele criar mamifero,depois cachorro. Precisa ocorrer comportamento de herança
Abstração= simplificar o mundo real para modelar o codigo

_____
1º PILAR >> ENCAPSULAMENTO = alguns comportamentos do codigo  estão privados,não visiveis ao usuario
PRIVATE: ATRIBUITO DISPONIVEL APENAS NO ESCOPO DA CLASSE
PUBLIC: SEM RESTRIÇÃO
PACKAGE (DEFAULT) : QUANDO UM ATRIBUTO É DEFINIDO DENTRO DE UM PACOTE, O MESMO SÓ PODE SER ACESSADO POR OUTROS DESTE LOCALIZAÇÕES
                QUANDO NENHUMA FORMA DE VISIBILIDADE FOR DEFINIDA, AUTOMATICAMENTE ASSUMIRÁ COMO PACOTE.
PROTECTED : DEPENDE DA HERANÇA. SÓ ACESSARÁ OUTRO ATRIBUTE, DESDE QUE SEJA HERDADO.
____

2º PILAR >>>>  HERANÇA: RECEBE POR PADRÃO ATRIBUTOS E COMPORTAMENTOS DA CLASSE PAI
>> Utiliza a palavra reservada extends
>> NO REUSO DE UM CÓDIGO: O COMPORTAMENTO POR COMPOSIÇÃO É MAI FLEXÍVEL QUE HERANÇA.

-----
3º PILAR >>>>  POLIMORFISMO:
ESTÁTICO: Sobrecarga > Quando temos métodos com nomes iguais, porém com parametros diferentes. Sentido: sobrecarga do nome

DINÂMICO: A partir da herança temos o poliformismo dinamico.

________________________________
4º PILAR >>>>ABSTRAÇÃO: SIMPLIFICAÇÃO CONCEITOS DO MUNDO REAL E MODELAR NO SOFTWARE

________________________________
-- invocar construtor da classe atual> this.atributoOuMetodo
-- invocar construtor da classe pai> super.atributoOuMetodo
---------------------------
CONSTRUTORES PADRÕES NUMA ESTRUTURA DE HERANÇA
>>> NO JAVA POR REGRA AS CLASSES POSSUEM CONSTRUTORES PADRÕES, QUE Podemos
SER CHAMADOS POR SEUS FILHOS ATRAVÉS DA PALAVRA SUPER
CONTRUTOR PADRÃO> SÃO AQUELES QUE NÃO RECEBEM NENHUM PARAMETRO

EXEMPLO DE CONSTRUTOR EXPLICITO (NÃO MAIS PADRÃO)

NomeDaClasse(int x, int y) { // obrigatoriamente precisa ser definido esses parametros
this.x=x;
this.y=y
}
Para que as classes herdadas possa chamar esse atributo agora definido de forma explicita

Agora de a classe herdada precisará definir, neste caso os parametros de x e y
Abaixo é uma das formas de se resolver essa questão

> Aqui os valores são definidos pelo usuário
NomeDaClasseHerdada(intx, int y){
super(x,y)
}

ou
>> Aqui os valores são fixos
NomeDaClasseHerdada(){
super(0,0) // aqui já define-se um valor inicial para as posicões x e y
}


